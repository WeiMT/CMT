@{
    ViewBag.Title = "车型库管理";
    Layout = "~/Views/Shared/_WebLayout.cshtml";
}

<h1 class="page-header">CarType Management</h1>
<ol class="breadcrumb">
    <li><a href="#">Home</a></li>
    <li><a href="#">Library</a></li>
    <li class="active">Data</li>
    <li><a href="#">Home</a></li>
    <li><a href="#">Library</a></li>
    <li><a href="#">Home</a></li>
    <li><a href="#">Library</a></li>
    <li><a href="#">Home</a></li>
    <li><a href="#">Library</a></li>
    <li><a href="#">Home</a></li>
    <li><a href="#">Library</a></li>
    <li><a href="#">Home</a></li>
    <li><a href="#">Library</a></li>
    <li><a href="#">Home</a></li>
    <li><a href="#">Library</a></li>
    <li><a href="#">Home</a></li>
    <li><a href="#">Library</a></li>
    <li><a href="#">Home</a></li>
    <li><a href="#">Library</a></li>
    <li><a href="#">Home</a></li>
    <li><a href="#">Library</a></li>
    <li><a href="#">Home</a></li>
    <li><a href="#">Library</a></li>
</ol>
<p>
    <div>
        <label style="vertical-align: middle; padding-right: .5em;" for="schBrandName">品牌:</label>
        <input type="search" id="schBrandName" style="width: 150px"
               data-role="dropdownlist"
               data-text-field="val"
               data-value-field="key"
               data-option-label="{ key: '', val: '全部' }"
               data-auto-bind="false"
               data-bind="source: brandNames,
                          value: selectedBrandName" />
        <label style="vertical-align: middle; padding-right: .5em;" for="schMfgrName">厂商:</label>
        <input type="search" id="schMfgrName" style="width: 150px"
               data-role="dropdownlist"
               data-option-label="{ key: '', val: '全部' }"
               data-text-field="val"
               data-value-field="key"
               data-auto-bind="false"
               data-bind="source: mfgrNames,
                          value: selectedMfgrName" />
        <label style="vertical-align: middle; padding-right: .5em;" for="schCarTypeName">车系:</label>
        <input type="search" id="schCarTypeName" style="width: 150px"
               data-role="dropdownlist"
               data-option-label="{ key: '', val: '全部' }"
               data-text-field="val"
               data-value-field="key"
               data-auto-bind="false"
               data-bind="source: carTypeNames,
                          value: selectedCarTypeName" />
        <label style="vertical-align: middle; padding-right: .5em;" for="schCarTypeYear">年款:</label>
        <input type="search" id="schCarTypeYear" style="width: 150px"
               data-role="dropdownlist"
               data-option-label="{ key: '', val: '全部' }"
               data-text-field="val"
               data-value-field="key"
               data-auto-bind="false"
               data-bind="source: carTypeYears,
                          value: selectedCarTypeYear" />
        
        <button data-role="button" data-icon="plus" class="pull-right" data-bind="click:CreateCarType">新增</button>
    </div>
</p>

<p>
    <div id="gridCarType" data-role="grid"
         data-auto-bind="false"
         data-scrollable="true"
         data-pageable="true"
         data-sortable="true"
         data-filterable="false"
         data-groupable="false"
         data-bind="source: carTypes"
         data-editable="{
                        mode: 'popup',
                        window: {
                            title: '编辑',
                            animation: false
                        },
                        confirmation: true
     }"
         data-columns="[
                        { 'field': 'BrandName', 'title': '品牌', 'width': 100 },
                        { 'field': 'MfgrName', 'title': '厂商', 'width': 100 },
                        { 'field': 'CarTypeName', 'title': '车系', 'width': 150 },
                        { 'field': 'CarTypeYear', 'title': '年款', 'width': 100 },
                        { 'field': 'Specification', 'title': '车型', 'width': 260 },
                        { 'field': 'BrandCountry', 'title': '国家', 'width': 100 },
                        { 'field': 'Technology', 'title': '技术', 'width': 100 },
                        { 'field': 'Grade', 'title': '级别', 'width': 100 },
                        { 'field': 'GasDisplacement', 'title': '排气量', 'width': 110 },
                        { 'field': 'GearBox', 'title': '变速箱', 'width': 110 },
                        { 'command': ['edit' , 'destroy'], 'title': '&nbsp;' , 'width': 200 },
     ]"
         style="width: 100%; height: 500px;"></div>
</p>

@section script
{
    <script>
        var vm = kendo.observable({
            //品牌下拉框数据源
            brandNames: new kendo.data.DataSource({
                transport: {
                    read: {
                        type: "GET",
                        url: "@Url.Content("~/api/ApiSetting/GetCarTypeBrandNames")",
                        dataType: "json",
                        cache: false
                    }
                }
            }),
            selectedBrandName: null,
            //厂商下拉框数据源
            mfgrNames: new kendo.data.DataSource({
                transport: {
                    read: {
                        type: "GET",
                        url: "@Url.Content("~/api/ApiSetting/GetCarTypeMfgrNames")",
                        dataType: "json",
                        cache: false
                    }
                }
            }),
            selectedMfgrName: null,
            //车系下拉框数据源
            carTypeNames: new kendo.data.DataSource({
                transport: {
                    read: {
                        type: "GET",
                        url: "@Url.Content("~/api/ApiSetting/GetCarTypeNames")",
                        dataType: "json",
                        cache: false
                    }
                }
            }),
            selectedCarTypeName: null,
            //年款下拉框数据源
            carTypeYears: new kendo.data.DataSource({
                transport: {
                    read: {
                        type: "GET",
                        url: "@Url.Content("~/api/ApiSetting/GetCarTypeYears")",
                        dataType: "json",
                        cache: false
                    }
                }
            }),
            selectedCarTypeYear: null,
            //车型库Grid数据源
            carTypes: new kendo.data.DataSource({
                transport: {
                    read: {
                        type: "GET",
                        url: "@Url.Content("~/api/ApiSetting/GetCarTypes")",
                        dataType: "json",
                        cache: false
                    },
                    update: {
                        type: "POST",
                        url: "@Url.Content("~/api/ApiSetting/UpdateCarType")",
                        contentType: 'application/x-www-form-urlencoded',
                        dataType: "json",
                        cache: false
                    },
                    destroy: {
                        type: "POST",
                        url: "@Url.Content("~/api/ApiSetting/DeleteCarType")",
                        contentType: 'application/x-www-form-urlencoded',
                        dataType: "json",
                        cache: false
                    }
                },
                serverPaging: true,
                serverSorting: true,
                serverGrouping: false,
                serverFiltering: false,
                pageSize: 26,
                schema: {
                    model: {
                        id: "Id"
                    },
                    total: "total",
                    data: "data"
                }
            }),
            pGetBrandNameAsync: function(param) {
                var task = Wind.Async.Task;

                return task.create(function(t) {
                    vm.brandNames.transport.options.read.data = param;
                    vm.brandNames.read();

                    vm.brandNames.one("requestEnd", function(e) {
                        if (e.type == "read") {
                            t.complete("success", vm.brandNames);
                        }
                    });
                });
            },
            pGetMfgrNameAsync: function(param) {
                var task = Wind.Async.Task;

                return task.create(function(t) {
                    vm.mfgrNames.transport.options.read.data = param;
                    vm.mfgrNames.read();

                    vm.mfgrNames.one("requestEnd", function(e) {
                        if (e.type == "read") {
                            t.complete("success", vm.mfgrNames);
                        }
                    });
                });
            },
            pGetCarTypeNamesAsync: function(param) {
                var task = Wind.Async.Task;

                return task.create(function(t) {
                    vm.carTypeNames.transport.options.read.data = param;
                    vm.carTypeNames.read();

                    vm.carTypeNames.one("requestEnd", function(e) {
                        if (e.type == "read") {
                            t.complete("success", vm.carTypeNames);
                        }
                    });
                });
            },
            pGetCarTypeYearsAsync: function(param) {
                var task = Wind.Async.Task;

                return task.create(function(t) {
                    vm.carTypeYears.transport.options.read.data = param;
                    vm.carTypeYears.read();

                    vm.carTypeYears.one("requestEnd", function(e) {
                        if (e.type == "read") {
                            t.complete("success", vm.carTypeYears);
                        }
                    });
                });
            },
            pGetCarTypesAsync: function(param) {
                var task = Wind.Async.Task;

                return task.create(function(t) {
                    if (vm.carTypes.page() != 1) {
                        vm.carTypes.page(1);
                    }

                    vm.carTypes.transport.options.read.data = param;
                    vm.carTypes.read();

                    vm.carTypes.one("requestEnd", function(e) {
                        if (e.type == "read") {
                            t.complete("success", vm.carTypes);
                        }
                    });
                });
            },
            CreateCarType: function() {
                $("#gridCarType").data("kendoGrid").addRow();
            },
            ViewLoaded: function() {
                vm.pGetCarTypesAsync().start();
            }
        });

        vm.bind("change", function(e) {
            var selectedBrandNameChanged = e.field == "selectedBrandName";
            var selectedMfgrNameChanged = e.field == "selectedMfgrName";
            var selectedCarTypeNameChanged = e.field == "selectedCarTypeName";
            var selectedCarTypeYearChanged = e.field == "selectedCarTypeYear";

            if (selectedBrandNameChanged) {
                var param = {
                    brandName: vm.get("selectedBrandName") == null ? "" : vm.get("selectedBrandName").key
                };

                if (vm.get("selectedMfgrName") == null) {
                    vm.pGetCarTypesAsync(param).start();
                } else {
                    vm.set("selectedMfgrName", null);
                }

                vm.pGetMfgrNameAsync(param).start();
            }

            if (selectedMfgrNameChanged) {
                param = {
                    brandName: vm.get("selectedBrandName") == null ? "" : vm.get("selectedBrandName").key,
                    mfgrName: vm.get("selectedMfgrName") == null ? "" : vm.get("selectedMfgrName").key
                };

                if (vm.get("selectedCarTypeName") == null) {
                    vm.pGetCarTypesAsync(param).start();
                } else {
                    vm.set("selectedCarTypeName", null);
                }

                vm.pGetCarTypeNamesAsync(param).start();
            }

            if (selectedCarTypeNameChanged) {
                param = {
                    brandName: vm.get("selectedBrandName") == null ? "" : vm.get("selectedBrandName").key,
                    mfgrName: vm.get("selectedMfgrName") == null ? "" : vm.get("selectedMfgrName").key,
                    carTypeName: vm.get("selectedCarTypeName") == null ? "" : vm.get("selectedCarTypeName").key
                };

                if (vm.get("selectedCarTypeYear") == null) {
                    vm.pGetCarTypesAsync(param).start();
                } else {
                    vm.set("selectedCarTypeYear", null);
                }

                vm.pGetCarTypeYearsAsync(param).start();
            }

            if (selectedCarTypeYearChanged) {
                param = {
                    brandName: vm.get("selectedBrandName") == null ? "" : vm.get("selectedBrandName").key,
                    mfgrName: vm.get("selectedMfgrName") == null ? "" : vm.get("selectedMfgrName").key,
                    carTypeName: vm.get("selectedCarTypeName") == null ? "" : vm.get("selectedCarTypeName").key,
                    carTypeYear: vm.get("selectedCarTypeYear") == null ? "" : vm.get("selectedCarTypeYear").key
                };
                vm.pGetCarTypesAsync(param).start();
            }
        });

        //view section
        kendo.bind(document.body, vm);
        vm.ViewLoaded();
    </script>
}
