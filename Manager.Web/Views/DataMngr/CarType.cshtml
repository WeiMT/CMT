@{
    ViewBag.Title = "车型库管理";
    Layout = "~/Views/Shared/_WebLayout.cshtml";
}

@section TopNav
{
    <li class="active"><a href="#">数据维护</a></li>
    <li><a href="#">商户管理</a></li>
    <li><a href="#">Profile</a></li>
    <li><a href="#">Help</a></li>
}

@section SideNav
{
    <ul class="nav nav-sidebar">
        <li class="active"><a href="#">车型库管理</a></li>
        <li><a href="#">商户标签管理</a></li>
        <li><a href="#">服务项目管理</a></li>
        <li><a href="#">Export</a></li>
    </ul>
    <ul class="nav nav-sidebar">
        <li><a href="">Nav item</a></li>
        <li><a href="">Nav item again</a></li>
        <li><a href="">One more nav</a></li>
        <li><a href="">Another nav item</a></li>
        <li><a href="">More navigation</a></li>
    </ul>
    <ul class="nav nav-sidebar">
        <li><a href="">Nav item again</a></li>
        <li><a href="">One more nav</a></li>
        <li><a href="">Another nav item</a></li>
    </ul>
}

<h1 class="page-header">@ViewBag.Title</h1>
<p>
    <div>
        <label style="vertical-align: middle; padding-right: .5em;" for="schBrandName">品牌:</label>
        <input type="search" id="schBrandName" style="width: 150px"
               data-role="dropdownlist"
               data-text-field="val"
               data-value-field="key"
               data-option-label="{ key: '', val: '全部' }"
               data-auto-bind="false"
               data-bind="source: brandNames,
                          value: selectedBrandName" />
        <label style="vertical-align: middle; padding-right: .5em;" for="schMfgrName">厂商:</label>
        <input type="search" id="schMfgrName" style="width: 150px"
               data-role="dropdownlist"
               data-option-label="{ key: '', val: '全部' }"
               data-text-field="val"
               data-value-field="key"
               data-auto-bind="false"
               data-bind="source: mfgrNames,
                          value: selectedMfgrName" />
        <label style="vertical-align: middle; padding-right: .5em;" for="schCarTypeName">车系:</label>
        <input type="search" id="schCarTypeName" style="width: 150px"
               data-role="dropdownlist"
               data-option-label="{ key: '', val: '全部' }"
               data-text-field="val"
               data-value-field="key"
               data-auto-bind="false"
               data-bind="source: carTypeNames,
                          value: selectedCarTypeName" />
        <label style="vertical-align: middle; padding-right: .5em;" for="schCarTypeYear">年款:</label>
        <input type="search" id="schCarTypeYear" style="width: 150px"
               data-role="dropdownlist"
               data-option-label="{ key: '', val: '全部' }"
               data-text-field="val"
               data-value-field="key"
               data-auto-bind="false"
               data-bind="source: carTypeYears,
                          value: selectedCarTypeYear" />

        <button data-role="button" data-icon="plus" class="pull-right" data-bind="click:CreateCarType">新增</button>
    </div>
</p>

<p>
    <div id="gridCarType" data-role="grid"
         data-auto-bind="false"
         data-scrollable="true"
         data-pageable="true"
         data-sortable="true"
         data-filterable="false"
         data-groupable="false"
         data-bind="source: carTypes"
         data-editable="{
                        mode: 'popup',
                        window: {
                            title: '编辑',
                            animation: false
                        },
                        confirmation: true
         }"
         data-columns="[
                        { 'field': 'BrandName', 'title': '品牌', 'width': 100, 'editor': brandNameEditor },
                        { 'field': 'MfgrName', 'title': '厂商', 'width': 100, 'editor': mfgrNameEditor },
                        { 'field': 'CarTypeName', 'title': '车系', 'width': 150, 'editor': carTypeNameEditor },
                        { 'field': 'CarTypeYear', 'title': '年款', 'width': 100, 'editor': carTypeYearEditor },
                        { 'field': 'Specification', 'title': '车型', 'width': 260 },
                        { 'field': 'BrandCountry', 'title': '国家', 'width': 100 },
                        { 'field': 'Technology', 'title': '技术', 'width': 100 },
                        { 'field': 'Grade', 'title': '级别', 'width': 100 },
                        { 'field': 'GasDisplacement', 'title': '排气量', 'width': 110 },
                        { 'field': 'GearBox', 'title': '变速箱', 'width': 110 },
                        { 'command': ['edit' , 'destroy'], 'title': '&nbsp;' , 'width': 200 },
         ]"
         style="width: 100%; height: 500px;"></div>
</p>

@section script
{
    <script>
        var vm = kendo.observable({
            //品牌下拉框数据源
            brandNames: new kendo.data.DataSource({
                transport: {
                    read: {
                        type: "GET",
                        url: "@Url.Content("~/api/CarType/GetCarTypeBrandNames")",
                        dataType: "json",
                        cache: false
                    }
                }
            }),
            selectedBrandName: null,
            //厂商下拉框数据源
            mfgrNames: new kendo.data.DataSource({
                transport: {
                    read: {
                        type: "GET",
                        url: "@Url.Content("~/api/CarType/GetCarTypeMfgrNames")",
                        dataType: "json",
                        cache: false
                    }
                }
            }),
            selectedMfgrName: null,
            //车系下拉框数据源
            carTypeNames: new kendo.data.DataSource({
                transport: {
                    read: {
                        type: "GET",
                        url: "@Url.Content("~/api/CarType/GetCarTypeNames")",
                        dataType: "json",
                        cache: false
                    }
                }
            }),
            selectedCarTypeName: null,
            //年款下拉框数据源
            carTypeYears: new kendo.data.DataSource({
                transport: {
                    read: {
                        type: "GET",
                        url: "@Url.Content("~/api/CarType/GetCarTypeYears")",
                        dataType: "json",
                        cache: false
                    }
                }
            }),
            selectedCarTypeYear: null,
            //车型库Grid数据源
            carTypes: new kendo.data.DataSource({
                transport: {
                    read: {
                        type: "GET",
                        url: "@Url.Content("~/api/CarType/GetCarTypes")",
                        dataType: "json",
                        cache: false
                    },
                    create: {
                        type: "POST",
                        url: "@Url.Content("~/api/CarType/AddCarType")",
                        contentType: 'application/x-www-form-urlencoded',
                        dataType: "json",
                        cache: false
                    },
                    update: {
                        type: "POST",
                        url: "@Url.Content("~/api/CarType/UpdateCarType")",
                        contentType: 'application/x-www-form-urlencoded',
                        dataType: "json",
                        cache: false
                    },
                    destroy: {
                        type: "POST",
                        url: "@Url.Content("~/api/CarType/DeleteCarType")",
                        contentType: 'application/x-www-form-urlencoded',
                        dataType: "json",
                        cache: false
                    },
                    parameterMap: function(data, type) {
                        return data;
                    }
                },
                serverPaging: true,
                serverSorting: true,
                serverGrouping: false,
                serverFiltering: false,
                pageSize: 26,
                schema: {
                    model: {
                        id: "Id"
                    },
                    total: "total",
                    data: "data"
                }
            }),
            pGetBrandNameAsync: function(param) {
                var task = Wind.Async.Task;

                return task.create(function(t) {
                    vm.brandNames.transport.options.read.data = param;
                    vm.brandNames.read();

                    vm.brandNames.one("requestEnd", function(e) {
                        if (e.type == "read") {
                            t.complete("success", vm.brandNames);
                        }
                    });
                });
            },
            pGetMfgrNameAsync: function(param) {
                var task = Wind.Async.Task;

                return task.create(function(t) {
                    vm.mfgrNames.transport.options.read.data = param;
                    vm.mfgrNames.read();

                    vm.mfgrNames.one("requestEnd", function(e) {
                        if (e.type == "read") {
                            t.complete("success", vm.mfgrNames);
                        }
                    });
                });
            },
            pGetCarTypeNamesAsync: function(param) {
                var task = Wind.Async.Task;

                return task.create(function(t) {
                    vm.carTypeNames.transport.options.read.data = param;
                    vm.carTypeNames.read();

                    vm.carTypeNames.one("requestEnd", function(e) {
                        if (e.type == "read") {
                            t.complete("success", vm.carTypeNames);
                        }
                    });
                });
            },
            pGetCarTypeYearsAsync: function(param) {
                var task = Wind.Async.Task;

                return task.create(function(t) {
                    vm.carTypeYears.transport.options.read.data = param;
                    vm.carTypeYears.read();

                    vm.carTypeYears.one("requestEnd", function(e) {
                        if (e.type == "read") {
                            t.complete("success", vm.carTypeYears);
                        }
                    });
                });
            },
            pGetCarTypesAsync: function(param) {
                var task = Wind.Async.Task;

                return task.create(function(t) {
                    if (vm.carTypes.page() != 1) {
                        vm.carTypes.page(1);
                    }

                    vm.carTypes.transport.options.read.data = param;
                    vm.carTypes.read();

                    vm.carTypes.one("requestEnd", function(e) {
                        if (e.type == "read") {
                            t.complete("success", vm.carTypes);
                        }
                    });
                });
            },
            CreateCarType: function() {
                $("#gridCarType").data("kendoGrid").addRow();
            },
            ViewLoaded: function() {
                vm.pGetCarTypesAsync().start();
            },
            editingCarType: {
                brandNames: new kendo.data.DataSource({
                    transport: {
                        read: {
                            type: "GET",
                            url: "@Url.Content("~/api/CarType/GetCarTypeBrandNames")",
                            dataType: "json",
                            cache: false
                        }
                    }
                }),
                mfgrNames: new kendo.data.DataSource({
                    transport: {
                        read: {
                            type: "GET",
                            url: "@Url.Content("~/api/CarType/GetCarTypeMfgrNames")",
                            dataType: "json",
                            cache: false
                        }
                    }
                }),
                carTypeNames: new kendo.data.DataSource({
                    transport: {
                        read: {
                            type: "GET",
                            url: "@Url.Content("~/api/CarType/GetCarTypeNames")",
                            dataType: "json",
                            cache: false
                        }
                    }
                }),
                carTypeYears: new kendo.data.DataSource({
                    transport: {
                        read: {
                            type: "GET",
                            url: "@Url.Content("~/api/CarType/GetCarTypeYears")",
                            dataType: "json",
                            cache: false
                        }
                    }
                }),
                pGetBrandNameAsync: function(param) {
                    var task = Wind.Async.Task;

                    return task.create(function(t) {
                        vm.editingCarType.brandNames.transport.options.read.data = param;
                        vm.editingCarType.brandNames.read();

                        vm.editingCarType.brandNames.one("requestEnd", function (e) {
                            if (e.type == "read") {
                                t.complete("success", vm.editingCarType.brandNames);
                            }
                        });
                    });
                },
                pGetMfgrNameAsync: function(param) {
                    var task = Wind.Async.Task;

                    return task.create(function(t) {
                        vm.editingCarType.mfgrNames.transport.options.read.data = param;
                        vm.editingCarType.mfgrNames.read();

                        vm.editingCarType.mfgrNames.one("requestEnd", function (e) {
                            if (e.type == "read") {
                                t.complete("success", vm.editingCarType.mfgrNames);
                            }
                        });
                    });
                },
                pGetCarTypeNamesAsync: function(param) {
                    var task = Wind.Async.Task;

                    return task.create(function(t) {
                        vm.editingCarType.carTypeNames.transport.options.read.data = param;
                        vm.editingCarType.carTypeNames.read();

                        vm.editingCarType.carTypeNames.one("requestEnd", function (e) {
                            if (e.type == "read") {
                                t.complete("success", vm.editingCarType.carTypeNames);
                            }
                        });
                    });
                },
                pGetCarTypeYearsAsync: function(param) {
                    var task = Wind.Async.Task;

                    return task.create(function(t) {
                        vm.editingCarType.carTypeYears.transport.options.read.data = param;
                        vm.editingCarType.carTypeYears.read();

                        vm.editingCarType.carTypeYears.one("requestEnd", function (e) {
                            if (e.type == "read") {
                                t.complete("success", vm.editingCarType.carTypeYears);
                            }
                        });
                    });
                }
            }
        });

        vm.bind("change", function(e) {
            var selectedBrandNameChanged = e.field == "selectedBrandName";
            var selectedMfgrNameChanged = e.field == "selectedMfgrName";
            var selectedCarTypeNameChanged = e.field == "selectedCarTypeName";
            var selectedCarTypeYearChanged = e.field == "selectedCarTypeYear";

            if (selectedBrandNameChanged) {
                var param = {
                    brandName: vm.get("selectedBrandName") == null ? "" : vm.get("selectedBrandName").key
                };

                if (vm.get("selectedMfgrName") == null) {
                    vm.pGetCarTypesAsync(param).start();
                } else {
                    vm.set("selectedMfgrName", null);
                }

                vm.pGetMfgrNameAsync(param).start();
            }

            if (selectedMfgrNameChanged) {
                param = {
                    brandName: vm.get("selectedBrandName") == null ? "" : vm.get("selectedBrandName").key,
                    mfgrName: vm.get("selectedMfgrName") == null ? "" : vm.get("selectedMfgrName").key
                };

                if (vm.get("selectedCarTypeName") == null) {
                    vm.pGetCarTypesAsync(param).start();
                } else {
                    vm.set("selectedCarTypeName", null);
                }

                vm.pGetCarTypeNamesAsync(param).start();
            }

            if (selectedCarTypeNameChanged) {
                param = {
                    brandName: vm.get("selectedBrandName") == null ? "" : vm.get("selectedBrandName").key,
                    mfgrName: vm.get("selectedMfgrName") == null ? "" : vm.get("selectedMfgrName").key,
                    carTypeName: vm.get("selectedCarTypeName") == null ? "" : vm.get("selectedCarTypeName").key
                };

                if (vm.get("selectedCarTypeYear") == null) {
                    vm.pGetCarTypesAsync(param).start();
                } else {
                    vm.set("selectedCarTypeYear", null);
                }

                vm.pGetCarTypeYearsAsync(param).start();
            }

            if (selectedCarTypeYearChanged) {
                param = {
                    brandName: vm.get("selectedBrandName") == null ? "" : vm.get("selectedBrandName").key,
                    mfgrName: vm.get("selectedMfgrName") == null ? "" : vm.get("selectedMfgrName").key,
                    carTypeName: vm.get("selectedCarTypeName") == null ? "" : vm.get("selectedCarTypeName").key,
                    carTypeYear: vm.get("selectedCarTypeYear") == null ? "" : vm.get("selectedCarTypeYear").key
                };
                vm.pGetCarTypesAsync(param).start();
            }
        });

        function brandNameEditor(container, options) {
            options.model.bind("change", function(e) {
                if (e.field == "BrandName") {
                    vm.editingCarType.pGetMfgrNameAsync({
                        brandName: options.model.get("BrandName")
                    }).start();
                    vm.editingCarType.pGetCarTypeNamesAsync({
                        brandName: options.model.get("BrandName"),
                        mfgrName: options.model.get("MfgrName")
                    }).start();
                    vm.editingCarType.pGetCarTypeYearsAsync({
                        brandName: options.model.get("BrandName"),
                        mfgrName: options.model.get("MfgrName"),
                        carTypeName: options.model.get("CarTypeName")
                    }).start();
                }
            });

            $('<input data-role="combobox" name="BrandName" data-value-primitive="true" data-text-field="val" data-value-field="key" ' +
                    'data-bind="source: editingCarType.brandNames, value: BrandName" data-auto-bind="false"/>')
                .appendTo(container);
        }

        function mfgrNameEditor(container, options) {
            options.model.bind("change", function (e) {
                if (e.field == "MfgrName") {
                    vm.editingCarType.pGetCarTypeNamesAsync({
                        brandName: options.model.get("BrandName"),
                        mfgrName: options.model.get("MfgrName")
                    }).start();
                    vm.editingCarType.pGetCarTypeYearsAsync({
                        brandName: options.model.get("BrandName"),
                        mfgrName: options.model.get("MfgrName"),
                        carTypeName: options.model.get("CarTypeName")
                    }).start();
                }
            });

            vm.editingCarType.pGetMfgrNameAsync({
                brandName : options.model.get("BrandName")
            }).start();

            $('<input data-role="combobox" name="MfgrName" data-value-primitive="true" data-text-field="val" data-value-field="key" ' +
                    'data-bind="source: editingCarType.mfgrNames, value: MfgrName" data-auto-bind="false"/>')
                .appendTo(container);
        }

        function carTypeNameEditor(container, options) {
            options.model.bind("change", function (e) {
                if (e.field == "CarTypeName") {
                    vm.editingCarType.pGetCarTypeYearsAsync({
                        brandName: options.model.get("BrandName"),
                        mfgrName: options.model.get("MfgrName"),
                        carTypeName: options.model.get("CarTypeName")
                    }).start();
                }
            });

            vm.editingCarType.pGetCarTypeNamesAsync({
                brandName: options.model.get("BrandName"),
                mfgrName: options.model.get("MfgrName")
            }).start();

            $('<input data-role="combobox" name="CarTypeName" data-value-primitive="true" data-text-field="val" data-value-field="key" ' +
                    'data-bind="source: editingCarType.carTypeNames, value: CarTypeName" data-auto-bind="false"/>')
                .appendTo(container);
        }

        function carTypeYearEditor(container, options) {
            vm.editingCarType.pGetCarTypeYearsAsync({
                brandName: options.model.get("BrandName"),
                mfgrName: options.model.get("MfgrName"),
                carTypeName: options.model.get("CarTypeName")
            }).start();

            $('<input data-role="combobox" name="CarTypeYear" data-value-primitive="true" data-text-field="val" data-value-field="key" ' +
                    'data-bind="source: editingCarType.carTypeYears, value: CarTypeYear" data-auto-bind="false"/>')
                .appendTo(container);
        }

        //view section
        kendo.bind(document.body, vm);
        vm.ViewLoaded();
    </script>
}
